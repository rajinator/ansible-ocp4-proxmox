---
- name: Destroy Bootstrap VM if Exists
  community.proxmox.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    #api_token_id: "{{ proxmox_secrets.api_token_id }}"
    #api_token_secret: "{{ proxmox_secrets.api_token_secret }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    name: "{{ item.name }}"
    node: "{{ proxmox.node }}"
    vmid: "{{ item.id }}"
    state: absent
  when: fullWipe | bool
  register: bootstrap_destroy_result
  failed_when:
    - bootstrap_destroy_result is failed
    - "'does not exist' not in (bootstrap_destroy_result.msg | default(''))"
  with_items:
   - "{{ nodeNetworkInfo.bootstrap }}"


# Create Bootstrap VM
- name: Create Bootstrap VM
  community.proxmox.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    #api_token_id: "{{ proxmox_secrets.api_token_id }}"
    #api_token_secret: "{{ proxmox_secrets.api_token_secret }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    name: "{{ item.name }}"
    node: "{{ proxmox.node }}"
    vmid: "{{ vmTemplate.id }}"
    newid: "{{ item.id }}"
    clone: "{{ vmTemplate.name }}"
    # Cannot do link clones with scsi0
    # full: no
    net:
      net0: 'virtio={{ item.MAC }},bridge={{ vmNet.ifName }}'
    agent: yes
    serial:
      serial0: socket
    state: present
    timeout: 300
    args: "-fw_cfg name=opt/com.coreos/config,file={{ files.proxmoxDir }}/ignitions/{{ openshift.cluster.name }}/bootstrap.ign"
  register: bootstrap_vm_info
  with_items:
   - "{{ nodeNetworkInfo.bootstrap }}"

- name: Update Bootstrap VM hardware configuration
  community.proxmox.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    vmid: "{{ item.id }}"
    node: "{{ proxmox.node }}"
    cores: "{{ bootstrap.cores }}"
    memory: "{{ bootstrap.mem }}"
    update: yes
  with_items:
    - "{{ nodeNetworkInfo.bootstrap }}"

##
- name: Create NIC net0 targeting the vm by id
  community.proxmox.proxmox_nic:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    #api_token_id: "{{ proxmox_secrets.api_token_id }}"
    #api_token_secret: "{{ proxmox_secrets.api_token_secret }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    vmid: "{{ item.id }}"
    interface: net0
    bridge: "{{ vmNet.ifName }}"
    mac: "{{ item.MAC }}"
  register: bootstrap_nic_set
  with_items:
   - "{{ nodeNetworkInfo.bootstrap }}"

# - name: View returned Bootstrap vm creation info
#   debug:
#     var: bootstrap_vm_info

- name: Resize bootstrap disks
  community.proxmox.proxmox_disk:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    vmid: "{{ item.id }}"
    disk: scsi0
    size: "{{ vm_disk_size }}"
    state: resized
  with_items:
    - "{{ nodeNetworkInfo.bootstrap }}"

- name: Start Bootstrap VM after all configuration is complete
  community.proxmox.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox_secrets.api_password }}"
    vmid: "{{ item.id }}"
    node: "{{ proxmox.node }}"
    state: started
    timeout: 60
  with_items:
    - "{{ nodeNetworkInfo.bootstrap }}"
  when: auto_start_vms | default(false) | bool

